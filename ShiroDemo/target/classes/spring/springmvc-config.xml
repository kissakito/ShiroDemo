<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- MVC注解驱动 -->
	<mvc:annotation-driven/>

	<!-- 配置扫描器，使得@Controller注解生效 -->
	<context:component-scan base-package="controller" />

	<!-- 定义视图解析器 -->
	<!-- prefix="/WEB-INF/jsp/", suffix=".jsp", viewname="test" -> "/WEB-INF/jsp/test.jsp" -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 前缀 -->
		<property name="prefix" value="/WEB-INF/" />
		<!-- 后缀 -->
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 处理静态资源被“/”所拦截的问题 -->
	<mvc:default-servlet-handler />
	
	<!-- 配置lifeCycleBeanProcessor，shiro和Spring整合之后，shiro的组件都以bean的方式 交给Spring容器来管理  -->
	<!-- Shiro生命周期处理器-->  
	<bean id="lifeCycleBeanProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<!-- Spring容器通过动态代理的方式，为lifeCycle生成代理对象，所以需要用depeds-on指定一下 -->
	
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifeCycleBeanProcessor">
		<!-- proxyTargetClass 默认值是false,表示只能用jdk代理        如果是true的话，表示启用cglib代理 -->
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	<!-- 权限管理器,想干活，得让领导（安全管理器）知道，所以需要配置一下 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	
</beans>