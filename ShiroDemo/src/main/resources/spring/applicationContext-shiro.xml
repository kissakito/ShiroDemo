<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
				         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				         http://www.springframework.org/schema/context
				         http://www.springframework.org/schema/context/spring-context-3.0.xsd
				         http://www.springframework.org/schema/tx
				         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
				         http://www.springframework.org/schema/aop 
				         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


	
	
	
	<!-- shiro和Spring整合之后，必须用cglib进行代理，才能生效，所以强制开启cglib代理 把proxy-target-class的值改成 
		true,表示强制使用cglib进行代理 -->
	<!--java动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。要求目标对象实现了接口
	  
	cglib是针对类来实现代理的，原理是对指定的业务类生成一个子类，并覆盖其中业务方法实现代理。因为采用的是继承，所以不能对final修饰的类进行代理。 
			 -->
	  <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> 
	

	<!-- 配置shiro的 安全管理器， 1.shiro会自动帮你做登录认证和权限认证，但是你得给shiro提供登录的资料（比如用户名和密码）以及权限 
		认证的资料（比如用户拥有哪些权限） 这些提供资料的代码，会写在一个类里，这个类需要开发人员自己写，一般把这个类叫做AuthRealm, 这个类必须得继承一个类，叫做AuthorizingRealm，之后继承这个类，并且在安全管理器里配置一下， 
		shiro才能知道有这么个东西，才能给你干活 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- property 的name是realm，固定，写死 -->
		<property name="realm" ref="AuthRealm"></property>
		
		<!-- <property name="sessionManager" ref="sessionManager"/> -->
	</bean>
	<bean id="AuthRealm" class="shiro.AuthRealm">
		<!--添加加密的算法 能够自动的去调用 然后与用户传入的token对比 -->
		<property name="credentialsMatcher" ref="authEnctype"></property>
	</bean>
	<!-- <bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="dataSource" ref="dataSource" />
		<property name="authenticationQuery"
			value="select u.pwd from tbl_user u where u.uuid = ?" />
		<property name="userRolesQuery"
			value="select r.uuid from tbl_user_role ur left join tbl_role r on ur.roleUuid 
		= r.uuid where ur.userUuid = ? " />
		<property name="permissionsQuery"
			value="select 
		p.uuid from tbl_role r left join tbl_role_permission rp on r.uuid = rp.roleUuid 
		left join tbl_permission p on rp.permissionUuid = p.uuid where r.uuid = ? 
		" />
		<property name="permissionsLookupEnabled" value="true" />
		<property name="saltStyle" value="NO_SALT" />
	</bean> -->
	<!-- 配置自己定义的加密管理器 -->
	<bean id="authEnctype" class="shiro.AuthCredential"></bean>


	<!-- 配置shrioFilter bean 目的是让Spring容器代理生成Filter 这个名字得和web.xml里配置shiroFilter的名字一致，因为Spring是根据bean的id来管理的 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>

		<property name="unauthorizedUrl" value="/index2.jsp" /> <!-- 没有授权返回地址 -->
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="filterChainDefinitions">
			<value>
				<!--关键字 authc拦截 anon 表示放行 -->
				/validate/doLogin=anon
				/validate/labelTest=anon
				<!-- /validate/labelTest=perms["user:create"] -->
				/staticfile/**=anon
				/**=authc
			</value>
		</property>
		<!-- anon,authc,authcBasic,user是第一组认证过滤器 
			 perms,port,rest,roles,ssl是第二组授权过滤器 
			各默认过滤器常用如下(注意URL Pattern里用到的是两颗星,这样才能实现任意层次的全匹配) 
			/admins/**=anon 无参,表示可匿名使用,可以理解为匿名用户或游客 
			/admins/user/**=authc 无参,表示需认证才能使用 /admins/user/**=authcBasic 无参,表示httpBasic认证 
			/admins/user/**=user 无参,表示必须存在用户,当登入操作时不做检查 /admins/user/**=ssl 无参,表示安全的URL请求,协议为https 
			/admins/user/**=perms[user:add:*] 参数可写多个,多参时必须加上引号,且参数之间用逗号分割,如/admins/user/**=perms["user:add:*,user:modify:*"] 
			当有多个参数时必须每个参数都通过才算通过,相当于isPermitedAll()方法 /admins/user/**=port[8081] 当请求的URL端口不是8081时,跳转到schemal://serverName:8081?queryString 
			其中schmal是协议http或https等,serverName是你访问的Host,8081是Port端口,queryString是你访问的URL里的?后面的参数 
			/admins/user/**=rest[user] 根据请求的方法,相当于/admins/user/**=perms[user:method],其中method为post,get,delete等 
			/admins/user/**=roles[admin] 参数可写多个,多个时必须加上引号,且参数之间用逗号分割,如/admins/user/**=roles["admin,guest"] 
			当有多个参数时必须每个参数都通过才算通过,相当于hasAllRoles()方法 -->
	</bean>
	
	<!-- 定义Session ID生成管理器 --> 
<!-- 	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	配置Session DAO的操作处理 
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO"> 
	    设置session缓存的名字，这个名字可以任意 
	    <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/> 
	    定义该Session DAO操作中所使用的ID生成器 
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/> 
	</bean>
	配置需要向Cookie中保存数据的配置模版 
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
	    在Tomcat运行下默认使用的Cookie的名字为JSESSIONID <constructor-arg value="mldn-session-id"/> 
	    保证该系统不会受到跨域的脚本操作供给 
	    <property name="httpOnly" value="true"/> 
	    定义Cookie的过期时间，单位为秒，如果设置为-1表示浏览器关闭，则Cookie消失 
	    <property name="maxAge" value="-1"/> 
	</bean>
	
	定义会话管理器的操作
    <bean id="sessionManager"
        class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        定义的是全局的session会话超时时间，此操作会覆盖web.xml文件中的超时时间配置
        <property name="globalSessionTimeout" value="1000000"/>
        删除所有无效的Session对象，此时的session被保存在了内存里面
        <property name="deleteInvalidSessions" value="true"/>
        定义要使用的无效的Session定时调度器
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        需要让此session可以使用该定时调度器进行检测
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        定义Session可以进行序列化的工具类
        <property name="sessionDAO" ref="sessionDAO"/>
        所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        定义sessionIdCookie模版可以进行操作的启用
        <property name="sessionIdCookieEnabled" value="true"/>
    </bean> 
    配置session的定时验证检测程序类，以让无效的session释放
    <bean id="sessionValidationScheduler"
        class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        设置session的失效扫描间隔，单位为毫秒
        <property name="sessionValidationInterval" value="100000"/>
        随后还需要定义有一个会话管理器的程序类的引用
        <property name="sessionManager" ref="sessionManager"/>
    </bean>  -->
</beans> 